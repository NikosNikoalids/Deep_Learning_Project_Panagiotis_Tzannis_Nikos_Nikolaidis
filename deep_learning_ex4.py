# -*- coding: utf-8 -*-
"""Deep_learning_ex4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10f3Jtc5JqZ_oEE6joBJcaQCRIheajTVC
"""

from datetime import datetime
import pandas as pd
import zipfile
import matplotlib.pyplot as plt
import warnings
from scipy.special import rel_entr

warnings.filterwarnings('ignore', '.*do not.*', )

with zipfile.ZipFile("/content/drive/MyDrive/Colab Notebooks/compressed_dataset.csv.zip") as z:
    with z.open("compressed_dataset.csv") as f:
      df = pd.read_csv(f)

df["date_time"] = pd.to_datetime(df['timestamp'], unit="ms")
df['day'] = pd.to_datetime(df['date_time'].dt.strftime('%Y-%m-%d'))
df.head()

from itertools import groupby
 
countries = df['country_id'].drop_duplicates().tolist()
average = []
df["excellent"] = (df['engagement'] >= 0.75)

for country in countries:
   dfexc = df.loc[df['country_id']== country].sort_values(by=['date_time'])
   dfexc.head()

   datetime = dfexc["date_time"].tolist()
   excellent = dfexc["excellent"].tolist()

   count = 0
   consecutive_values = []
   flag = 0
   for i in range(len(datetime)):
     if((excellent[i]) & (flag == 0)):
        start = datetime[i]
        end = datetime[i]
        flag = 1
     elif((excellent[i]) & (flag == 1)):
        if((datetime[i]-end).total_seconds() > 600): 
           consecutive_values.append(end - start)
           flag = 0
        else:   
           end = datetime[i]   
     elif((not excellent[i]) & (flag == 1)):
        consecutive_values.append(end - start)
        flag = 0   

   for j in range(len(consecutive_values)):
      consecutive_values[j] = consecutive_values[j].total_seconds()
   if(len(consecutive_values) != 0):
      average.append(sum(consecutive_values)/len(consecutive_values))
   else:
      average.append(0)

from matplotlib.pyplot import figure

plt.figure(figsize=(50,30))
plt.bar(countries, average, color ='maroon', width = 0.4)
plt.xticks(countries, rotation=90)
plt.xlabel("Country_id")
plt.ylabel("Engagement excellent level duration")

plt.show()

from itertools import groupby
 
countries = df['country_id'].drop_duplicates().tolist()
average = []
df["good"] = ((df['engagement'] <= 0.75) & (df['engagement'] >= 0.5))

for country in countries:
   dfgood = df.loc[df['country_id']== country].sort_values(by=['date_time'])
   dfgood.head()

   datetime = dfgood["date_time"].tolist()
   good = dfgood["good"].tolist()

   count = 0
   consecutive_values = []
   flag = 0
   for i in range(len(datetime)):
     if((good[i]) & (flag == 0)):
        start = datetime[i]
        end = datetime[i]
        flag = 1
     elif((good[i]) & (flag == 1)):
        if((datetime[i]-end).total_seconds() > 600): 
           consecutive_values.append(end - start)
           flag = 0
        else:   
           end = datetime[i]   
     elif((not good[i]) & (flag == 1)):
        consecutive_values.append(end - start)
        flag = 0   

   for j in range(len(consecutive_values)):
      consecutive_values[j] = consecutive_values[j].total_seconds()
   if(len(consecutive_values) != 0):
      average.append(sum(consecutive_values)/len(consecutive_values))
   else:
      average.append(0)

from matplotlib.pyplot import figure

plt.figure(figsize=(50,30))
plt.bar(countries, average, color ='maroon', width = 0.4)
plt.xticks(countries, rotation=90)
plt.xlabel("Country_id")
plt.ylabel("Engagement good level duration")

plt.show()

from itertools import groupby
 
countries = df['country_id'].drop_duplicates().tolist()
average = []
df["bad"] = ((df['engagement'] <= 0.5) & (df['engagement'] >= 0.25))

for country in countries:
   dfbad = df.loc[df['country_id']== country].sort_values(by=['date_time'])
   dfbad.head()

   datetime = dfbad["date_time"].tolist()
   bad = dfbad["bad"].tolist()

   count = 0
   consecutive_values = []
   flag = 0
   for i in range(len(datetime)):
     if((bad[i]) & (flag == 0)):
        start = datetime[i]
        end = datetime[i]
        flag = 1
     elif((bad[i]) & (flag == 1)):
        if((datetime[i]-end).total_seconds() > 600): 
           consecutive_values.append(end - start)
           flag = 0
        else:   
           end = datetime[i]   
     elif((not bad[i]) & (flag == 1)):
        consecutive_values.append(end - start)
        flag = 0   

   for j in range(len(consecutive_values)):
      consecutive_values[j] = consecutive_values[j].total_seconds()
   if(len(consecutive_values) != 0):
      average.append(sum(consecutive_values)/len(consecutive_values))
   else:
      average.append(0)

from matplotlib.pyplot import figure

plt.figure(figsize=(50,30))
plt.bar(countries, average, color ='maroon', width = 0.4)
plt.xticks(countries, rotation=90)
plt.xlabel("Country_id")
plt.ylabel("Engagement bad level duration")

plt.show()

from itertools import groupby
 
countries = df['country_id'].drop_duplicates().tolist()
average = []
df["terrible"] = (df['engagement'] <= 0.25)

for country in countries:
   dfterrible = df.loc[df['country_id']== country].sort_values(by=['date_time'])
   dfterrible.head()

   datetime = dfterrible["date_time"].tolist()
   terrible = dfterrible["terrible"].tolist()

   count = 0
   consecutive_values = []
   flag = 0
   for i in range(len(datetime)):
     if((terrible[i]) & (flag == 0)):
        start = datetime[i]
        end = datetime[i]
        flag = 1
     elif((terrible[i]) & (flag == 1)):
        if((datetime[i]-end).total_seconds() > 600): 
           consecutive_values.append(end - start)
           flag = 0
        else:   
           end = datetime[i]   
     elif((not terrible[i]) & (flag == 1)):
        consecutive_values.append(end - start)
        flag = 0   

   for j in range(len(consecutive_values)):
      consecutive_values[j] = consecutive_values[j].total_seconds()
   if(len(consecutive_values) != 0):
      average.append(sum(consecutive_values)/len(consecutive_values))
   else:
      average.append(0)

from matplotlib.pyplot import figure

plt.figure(figsize=(50,30))
plt.bar(countries, average, color ='maroon', width = 0.4)
plt.xticks(countries, rotation=90)
plt.xlabel("Country_id")
plt.ylabel("Engagement terrible level duration")

plt.show()

from itertools import groupby
 
cities = df['city_id'].drop_duplicates().tolist()
average = []
df["excellent"] = (df['engagement'] >= 0.75)

for city in cities:
   dfexc = df.loc[df['city_id']== city].sort_values(by=['date_time'])
   dfexc.head()

   datetime = dfexc["date_time"].tolist()
   excellent = dfexc["excellent"].tolist()

   count = 0
   consecutive_values = []
   flag = 0
   for i in range(len(datetime)):
     if((excellent[i]) & (flag == 0)):
        start = datetime[i]
        end = datetime[i]
        flag = 1
     elif((excellent[i]) & (flag == 1)):  
        if((datetime[i]-end).total_seconds() > 600): 
           consecutive_values.append(end - start)
           flag = 0
        else:   
           end = datetime[i]
     elif((not excellent[i]) & (flag == 1)):
        consecutive_values.append(end - start)
        flag = 0   

   for j in range(len(consecutive_values)):
      consecutive_values[j] = consecutive_values[j].total_seconds()
   if(len(consecutive_values) != 0):
      average.append(sum(consecutive_values)/len(consecutive_values))
   else:
      average.append(0)

plt.figure(figsize=(500,120))
plt.bar(cities, average, color ='maroon', width = 0.75)
plt.xticks(rotation=90)
plt.xlabel("City_id")
plt.ylabel("Engagement excellent level duration")

from itertools import groupby
 
cities = df['city_id'].drop_duplicates().tolist()
average = []
df["good"] = ((df['engagement'] <= 0.75) & (df['engagement'] >= 0.5))

for city in cities:
   dfgood = df.loc[df['city_id']== city].sort_values(by=['date_time'])
   dfgood.head()

   datetime = dfgood["date_time"].tolist()
   good = dfgood["good"].tolist()

   count = 0
   consecutive_values = []
   flag = 0
   for i in range(len(datetime)):
     if((good[i]) & (flag == 0)):
        start = datetime[i]
        end = datetime[i]
        flag = 1
     elif((good[i]) & (flag == 1)):  
        if((datetime[i]-end).total_seconds() > 600): 
           consecutive_values.append(end - start)
           flag = 0
        else:   
           end = datetime[i]
     elif((not good[i]) & (flag == 1)):
        consecutive_values.append(end - start)
        flag = 0   

   for j in range(len(consecutive_values)):
      consecutive_values[j] = consecutive_values[j].total_seconds()
   if(len(consecutive_values) != 0):
      average.append(sum(consecutive_values)/len(consecutive_values))
   else:
      average.append(0)

plt.figure(figsize=(500,120))
plt.bar(cities, average, color ='maroon', width = 0.75)
plt.xticks(rotation=90)
plt.xlabel("City_id")
plt.ylabel("Engagement good level duration")

from itertools import groupby
 
cities = df['city_id'].drop_duplicates().tolist()
average = []
df["bad"] = ((df['engagement'] >= 0.25) & (df['engagement'] <= 0.5))

for city in cities:
   dfbad = df.loc[df['city_id']== city].sort_values(by=['date_time'])
   dfbad.head()

   datetime = dfbad["date_time"].tolist()
   bad = dfbad["bad"].tolist()

   count = 0
   consecutive_values = []
   flag = 0
   for i in range(len(datetime)):
     if((bad[i]) & (flag == 0)):
        start = datetime[i]
        end = datetime[i]
        flag = 1
     elif((bad[i]) & (flag == 1)):  
        if((datetime[i]-end).total_seconds() > 600): 
           consecutive_values.append(end - start)
           flag = 0
        else:   
           end = datetime[i]
     elif((not bad[i]) & (flag == 1)):
        consecutive_values.append(end - start)
        flag = 0   

   for j in range(len(consecutive_values)):
      consecutive_values[j] = consecutive_values[j].total_seconds()
   if(len(consecutive_values) != 0):
      average.append(sum(consecutive_values)/len(consecutive_values))
   else:
      average.append(0)

plt.figure(figsize=(500,120))
plt.bar(cities, average, color ='maroon', width = 0.75)
plt.xticks(rotation=90)
plt.xlabel("City_id")
plt.ylabel("Engagement bad level duration")

from itertools import groupby
 
cities = df['city_id'].drop_duplicates().tolist()
average = []
df["terrible"] = (df['engagement'] <= 0.25)

for city in cities:
   dfterrible = df.loc[df['city_id']== city].sort_values(by=['date_time'])
   dfterrible.head()

   datetime = dfterrible["date_time"].tolist()
   terrible = dfterrible["terrible"].tolist()

   count = 0
   consecutive_values = []
   flag = 0
   for i in range(len(datetime)):
     if((terrible[i]) & (flag == 0)):
        start = datetime[i]
        end = datetime[i]
        flag = 1
     elif((terrible[i]) & (flag == 1)):  
        if((datetime[i]-end).total_seconds() > 600): 
           consecutive_values.append(end - start)
           flag = 0
        else:   
           end = datetime[i]
     elif((not terrible[i]) & (flag == 1)):
        consecutive_values.append(end - start)
        flag = 0   

   for j in range(len(consecutive_values)):
      consecutive_values[j] = consecutive_values[j].total_seconds()
   if(len(consecutive_values) != 0):
      average.append(sum(consecutive_values)/len(consecutive_values))
   else:
      average.append(0)

plt.figure(figsize=(500,120))
plt.bar(cities, average, color ='maroon', width = 0.75)
plt.xticks(rotation=90)
plt.xlabel("City_id")
plt.ylabel("Engagement terrible level duration")

from itertools import groupby
 
viewers = df['viewer_type'].drop_duplicates().tolist()
average = []
df["excellent"] = (df['engagement'] >= 0.75)

for viewer in viewers:
   dfexc = df.loc[df['viewer_type']== viewer].sort_values(by=['date_time'])
   dfexc.head()

   datetime = dfexc["date_time"].tolist()
   excellent = dfexc["excellent"].tolist()

   count = 0
   consecutive_values = []
   flag = 0
   for i in range(len(datetime)):
     if((excellent[i]) & (flag == 0)):
        start = datetime[i]
        end = datetime[i]
        flag = 1
     elif((excellent[i]) & (flag == 1)):  
        if((datetime[i]-end).total_seconds() > 600): 
           consecutive_values.append(end - start)
           flag = 0
        else:   
           end = datetime[i]    
     elif((not excellent[i]) & (flag == 1)):
        consecutive_values.append(end - start)
        flag = 0   

   for j in range(len(consecutive_values)):
      consecutive_values[j] = consecutive_values[j].total_seconds()
   if(len(consecutive_values) != 0):
      average.append(sum(consecutive_values)/len(consecutive_values))
   else:
      average.append(0)

plt.bar(viewers, average, color ='maroon', width = 0.4)
plt.xlabel("Viewer_type")
plt.ylabel("Engagement excellent level duration")
plt.show()

from itertools import groupby
 
viewers = df['viewer_type'].drop_duplicates().tolist()
average = []
df["good"] = ((df['engagement'] <= 0.75) & (df['engagement'] >= 0.5))

for viewer in viewers:
   dfgood = df.loc[df['viewer_type']== viewer].sort_values(by=['date_time'])
   dfgood.head()

   datetime = dfgood["date_time"].tolist()
   good = dfgood["good"].tolist()

   count = 0
   consecutive_values = []
   flag = 0
   for i in range(len(datetime)):
     if((good[i]) & (flag == 0)):
        start = datetime[i]
        end = datetime[i]
        flag = 1
     elif((good[i]) & (flag == 1)):  
        if((datetime[i]-end).total_seconds() > 600): 
           consecutive_values.append(end - start)
           flag = 0
        else:   
           end = datetime[i]    
     elif((not good[i]) & (flag == 1)):
        consecutive_values.append(end - start)
        flag = 0   

   for j in range(len(consecutive_values)):
      consecutive_values[j] = consecutive_values[j].total_seconds()
   if(len(consecutive_values) != 0):
      average.append(sum(consecutive_values)/len(consecutive_values))
   else:
      average.append(0)

plt.bar(viewers, average, color ='maroon', width = 0.4)
plt.xlabel("Viewer_type")
plt.ylabel("Engagement good level duration")
plt.show()

from itertools import groupby
 
viewers = df['viewer_type'].drop_duplicates().tolist()
average = []
df["bad"] = ((df['engagement'] >= 0.25) & (df['engagement'] <= 0.5))

for viewer in viewers:
   dfbad = df.loc[df['viewer_type']== viewer].sort_values(by=['date_time'])
   dfbad.head()

   datetime = dfbad["date_time"].tolist()
   bad = dfbad["bad"].tolist()

   count = 0
   consecutive_values = []
   flag = 0
   for i in range(len(datetime)):
     if((bad[i]) & (flag == 0)):
        start = datetime[i]
        end = datetime[i]
        flag = 1
     elif((bad[i]) & (flag == 1)):  
        if((datetime[i]-end).total_seconds() > 600): 
           consecutive_values.append(end - start)
           flag = 0
        else:   
           end = datetime[i]    
     elif((not bad[i]) & (flag == 1)):
        consecutive_values.append(end - start)
        flag = 0   

   for j in range(len(consecutive_values)):
      consecutive_values[j] = consecutive_values[j].total_seconds()
   if(len(consecutive_values) != 0):
      average.append(sum(consecutive_values)/len(consecutive_values))
   else:
      average.append(0)

plt.bar(viewers, average, color ='maroon', width = 0.4)
plt.xlabel("Viewer_type")
plt.ylabel("Engagement bad level duration")
plt.show()

from itertools import groupby
 
viewers = df['viewer_type'].drop_duplicates().tolist()
average = []
df["terrible"] = (df['engagement'] <= 0.25)

for viewer in viewers:
   dfterrible = df.loc[df['viewer_type']== viewer].sort_values(by=['date_time'])
   dfterrible.head()

   datetime = dfterrible["date_time"].tolist()
   terrible = dfterrible["terrible"].tolist()

   count = 0
   consecutive_values = []
   flag = 0
   for i in range(len(datetime)):
     if((terrible[i]) & (flag == 0)):
        start = datetime[i]
        end = datetime[i]
        flag = 1
     elif((terrible[i]) & (flag == 1)):  
        if((datetime[i]-end).total_seconds() > 600): 
           consecutive_values.append(end - start)
           flag = 0
        else:   
           end = datetime[i]    
     elif((not terrible[i]) & (flag == 1)):
        consecutive_values.append(end - start)
        flag = 0   

   for j in range(len(consecutive_values)):
      consecutive_values[j] = consecutive_values[j].total_seconds()
   if(len(consecutive_values) != 0):
      average.append(sum(consecutive_values)/len(consecutive_values))
   else:
      average.append(0)

plt.bar(viewers, average, color ='maroon', width = 0.4)
plt.xlabel("Viewer_type")
plt.ylabel("Engagement terrible level duration")
plt.show()